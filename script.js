const version = localStorage.getItem('gender');
const savedGender = localStorage.getItem('gender');
const currentPath = window.location.pathname;
const fileName = currentPath.split('/').pop();

if (!localStorage.getItem("gender") && !window.location.pathname.includes("index.html")) {
  window.location.href = "index.html";
}
if (fileName !== 'index.html' && (savedGender === 'boy' || savedGender === 'girl')) {
  document.body.classList.add(savedGender);
}
// –û–±—â–∏–µ —Å—Å—ã–ª–∫–∏
const links = {
  main: {
    cell1: 'exercise.html',
    cell2: 'teory.html',
    cell3: 'alphabet.html',
    cell4: 'faq.html',
  },
  exercises: [
    "exercise1.html",
    "exercise2.html",
    "exercise3.html",
    "exercise4.html",
    "exercise5.html"
  ],
  mainPage: "main.html",
  audioFolder: savedGender === 'boy' ? "src/audiomen" : "src/audiowomen"
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –ø–ª–∏—Ç–∫–∞–º
function setLink(id, link) {
  const elem = document.getElementById(id);
  if (elem) {
    elem.style.cursor = 'pointer';
    elem.addEventListener('click', () => {
      window.location.href = link;
    });
  }
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –ø–ª–∏—Ç–æ–∫
if (savedGender) {
  Object.entries(links.main).forEach(([key, url]) => {
    setLink(`main-grid_${key}`, url);
  });

} else {
  console.warn('–ü–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
}
const boyBlock = document.getElementById('boy');
const girlBlock = document.getElementById('girl');

if (boyBlock) {
  boyBlock.addEventListener('click', () => {
    localStorage.setItem('gender', 'boy');
    window.location.href = 'main.html';
  });
  boyBlock.addEventListener('mouseenter', () => document.body.classList.add('boy-hover'));
  boyBlock.addEventListener('mouseleave', () => document.body.classList.remove('boy-hover'));
}

if (girlBlock) {
  girlBlock.addEventListener('click', () => {
    localStorage.setItem('gender', 'girl');
    window.location.href = 'main.html';
  });
  girlBlock.addEventListener('mouseenter', () => document.body.classList.add('girl-hover'));
  girlBlock.addEventListener('mouseleave', () => document.body.classList.remove('girl-hover'));
}

function updateEmojis() {
  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞
  const emojis = {
      exercises: {
          boy: "üßëüèª‚Äçüè´", // –î–ª—è –º–∞–ª—å—á–∏–∫–æ–≤
          girl: "üë©üèª‚Äçüè´"  // –î–ª—è –¥–µ–≤–æ—á–µ–∫
      },
      theory: {
          boy: "üìò", // –î–ª—è –º–∞–ª—å—á–∏–∫–æ–≤
          girl: "üìö"  // –î–ª—è –¥–µ–≤–æ—á–µ–∫
      },
      alphabet: {
          boy: "üî§", // –î–ª—è –º–∞–ª—å—á–∏–∫–æ–≤
          girl: "üÖ∞Ô∏è"  // –î–ª—è –¥–µ–≤–æ—á–µ–∫
      },
      faq: {
          boy: "üôãüèª‚Äç‚ôÇÔ∏è", // –î–ª—è –º–∞–ª—å—á–∏–∫–æ–≤
          girl: "üôãüèª‚Äç‚ôÄÔ∏è"  // –î–ª—è –¥–µ–≤–æ—á–µ–∫
      }
  };

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç–º–æ–¥–∑–∏
  const emojiElements = document.querySelectorAll('.main_grid_grid-cell_emoji');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
  emojiElements.forEach((emojiElement, index) => {
      switch (index) {
          case 0: // –î–ª—è "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
              emojiElement.textContent = savedGender === 'boy' ? emojis.exercises.boy : emojis.exercises.girl;
              break;
          case 1: // –î–ª—è "–¢–µ–æ—Ä–∏–∏"
              emojiElement.textContent = savedGender === 'boy' ? emojis.theory.boy : emojis.theory.girl;
              break;
          case 2: // –î–ª—è "–ê–ª—Ñ–∞–≤–∏—Ç–∞"
              emojiElement.textContent = savedGender === 'boy' ? emojis.alphabet.boy : emojis.alphabet.girl;
              break;
          case 3: // –î–ª—è "FAQ"
              emojiElement.textContent = savedGender === 'boy' ? emojis.faq.boy : emojis.faq.girl;
              break;
          default:
              emojiElement.textContent = "";
      }
  });
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
updateEmojis();

// === –ê–ª—Ñ–∞–≤–∏—Ç: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è ===
const toggleSwitch = document.getElementById('toggle-switch');
const blocks = document.querySelectorAll('.main_grid-alphabet_cell_half1_trans');

// –ò—Å—Ö–æ–¥–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const originalContent = [
  "[ei]", "[bi]", "[si]", "[di]", "[i]", "[ef]", "[d íi]", "[eich]", "[ai]", "[d íei]",
  "[kei]", "[el]", "[em]", "[en]", "[ou]", "[pi]", "[kju]", "[…ëÀê]", "[es]", "[ti]",
  "[juÀê]", "[vi]", "[double-u]", "[eks]", "[wai]", "[zed]"
];
const newContent = [
  "[—ç–π]", "[–±–∏]", "[—Å–∏]", "[–¥–∏]", "[–∏]", "[—ç—Ñ]", "[–¥–∂–∏]", "[—ç–π—á]", "[–∞–π]", "[–¥–∂–µ–π]",
  "[–∫–µ–π]", "[—ç–ª]", "[—ç–º]", "[—ç–Ω]", "[–∞—É]", "[–ø–∏]", "[–∫—å—é]", "[–∞—Ä]", "[—ç—Å]", "[—Ç–∏]",
  "[—é]", "[–≤–∏]", "[–¥–∞–±–ª-—é]", "[—ç–∫—Å]", "[—É–∞–π]", "[–∑–µ–¥]"
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function changeContent(content) {
  blocks.forEach((block, i) => block.textContent = content[i]);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É–º–±–ª–µ—Ä–∞
if (toggleSwitch) {
  toggleSwitch.addEventListener('change', () => {
    changeContent(toggleSwitch.checked ? newContent : originalContent);
  });
}

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
changeContent(originalContent);

// === –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤ ===
const gender = localStorage.getItem('gender');
const audioFolder = gender === 'boy' ? "src/audiomen" : "src/audiowomen";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playSound(letter) {
  const audio = new Audio(`${audioFolder}/${letter.toLowerCase()}.mp3`);
  audio.play();
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —è—á–µ–µ–∫
document.querySelectorAll('.main_grid-alphabet_cell').forEach(cell => {
  const letterBlock = cell.querySelector('.main_grid-alphabet_cell_half1_bukva');
  if (letterBlock) {
    const letter = letterBlock.textContent.trim()[0];
    cell.addEventListener('click', () => playSound(letter));
  }
});
// === –†–∞—Å–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–æ–≤ —Å –≤–∏–¥–µ–æ ===
document.addEventListener("DOMContentLoaded", () => {
  const items = document.querySelectorAll(".main-exercise_grid-item");

  items.forEach((item) => {
    const video = item.querySelector("video");
    const clickableCell = item.querySelector(".main-exercise_grid-item-cell");

    clickableCell.addEventListener("click", () => {
      const isActive = item.classList.contains("active");

      items.forEach((otherItem) => {
        otherItem.classList.remove("active");
        const otherVideo = otherItem.querySelector("video");
        if (otherVideo) {
          otherVideo.pause();
          otherVideo.currentTime = 0;
        }
      });

      if (!isActive) {
        item.classList.add("active");
        if (video) {
          setTimeout(() => {
            video.currentTime = 0;
            video.play().catch(err => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ:", err));
          }, 500);
        }
      }
    });
  });

  // === –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞—á–∞—Ç—å" –≤–Ω—É—Ç—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  const startButtons = document.querySelectorAll(".main-exercise_grid-item-cell-expanding-block-half-button");

if (version && links.exercises) {
  const exercises = links.exercises;
  startButtons.forEach((button, index) => {
    button.addEventListener("click", () => {
      const url = exercises[index];
      if (url) {
        window.location.href = url;
      } else {
        console.warn("–î–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω –∞–¥—Ä–µ—Å –ø–µ—Ä–µ—Ö–æ–¥–∞");
      }
    });
  });
}
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

const questionsByGender = {
  boy: {
    easy: [
      { sentence: "He ___ to school every day.", correctAnswer: "goes", options: ["goes", "go", "going", "went"] },
      { sentence: "He ___ breakfast now.", correctAnswer: "is eating", options: ["eats", "is eating", "eat", "eating"] },
      { sentence: "He ___ a book yesterday.", correctAnswer: "read", options: ["reads", "read", "reading", "is reading"] },
      { sentence: "He ___ to the park tomorrow.", correctAnswer: "will go", options: ["go", "goes", "will go", "going"] },
      { sentence: "He ___ TV right now.", correctAnswer: "is watching", options: ["watches", "is watching", "watch", "watching"] },
      { sentence: "He ___ football every Sunday.", correctAnswer: "plays", options: ["play", "playing", "plays", "is playing"] },
      { sentence: "He ___ his homework last night.", correctAnswer: "did", options: ["does", "do", "did", "doing"] },
      { sentence: "He ___ to music now.", correctAnswer: "is listening", options: ["listens", "is listening", "listen", "listened"] },
      { sentence: "He ___ to school by bus.", correctAnswer: "goes", options: ["go", "goes", "going", "went"] },
      { sentence: "He ___ lunch at 12:00.", correctAnswer: "has", options: ["have", "has", "having", "had"] }
    ],
    medium: [
      { sentence: "He ___ to school every day.", correctAnswer: "goes", options: ["goes", "went", "will go", "is going"] },
      { sentence: "He ___ a book yesterday.", correctAnswer: "read", options: ["reads", "read", "is reading", "will read"] },
      { sentence: "He ___ to the gym tomorrow.", correctAnswer: "will go", options: ["goes", "went", "will go", "is going"] },
      { sentence: "He ___ TV right now.", correctAnswer: "is watching", options: ["watches", "watched", "is watching", "watch"] },
      { sentence: "He ___ for 2 hours when I came.", correctAnswer: "had been studying", options: ["studied", "was studying", "had been studying", "has studied"] },
      { sentence: "He ___ already ___ dinner.", correctAnswer: "has eaten", options: ["has eaten", "ate", "eats", "is eating"] },
      { sentence: "He ___ when the phone rang.", correctAnswer: "was sleeping", options: ["slept", "was sleeping", "is sleeping", "has slept"] },
      { sentence: "He ___ in this city since 2020.", correctAnswer: "has lived", options: ["lives", "lived", "has lived", "had lived"] },
      { sentence: "He ___ a new car by next year.", correctAnswer: "will have bought", options: ["bought", "buys", "has bought", "will have bought"] },
      { sentence: "He ___ a lot of movies last month.", correctAnswer: "watched", options: ["watched", "watches", "has watched", "was watching"] }
    ],
    hard: [
      { sentence: "By the time you arrive, he ___ the project.", correctAnswer: "will have finished", options: ["will finish", "will have finished", "is finishing", "has finished"] },
      { sentence: "He ___ at the library for three hours before she called.", correctAnswer: "had been studying", options: ["studied", "was studying", "had been studying", "has been studying"] },
      { sentence: "If he ___ harder, he would have passed the exam.", correctAnswer: "had studied", options: ["studied", "had studied", "would study", "has studied"] },
      { sentence: "He wishes he ___ to the party last night.", correctAnswer: "had gone", options: ["went", "had gone", "would go", "has gone"] },
      { sentence: "By next month, he ___ at this company for five years.", correctAnswer: "will have been working", options: ["will work", "will have worked", "will have been working", "has been working"] },
      { sentence: "He ___ to have finished his homework by now.", correctAnswer: "is supposed", options: ["supposes", "is supposed", "was supposed", "has supposed"] },
      { sentence: "Hardly ___ the house when it started to rain.", correctAnswer: "had he left", options: ["he had left", "had he left", "he left", "has he left"] },
      { sentence: "Not only ___ late, but he also forgot his presentation.", correctAnswer: "was he", options: ["he was", "was he", "he is", "is he"] },
      { sentence: "He suggested that she ___ a doctor.", correctAnswer: "see", options: ["sees", "saw", "see", "would see"] },
      { sentence: "He demanded that the report ___ immediately.", correctAnswer: "be submitted", options: ["is submitted", "was submitted", "be submitted", "would be submitted"] }
    ]
  },
  girl: {
    easy: [
      { sentence: "She ___ breakfast every morning.", correctAnswer: "eats", options: ["eat", "eats", "eating", "ate"] },
      { sentence: "She ___ a book now.", correctAnswer: "is reading", options: ["reads", "is reading", "read", "reading"] },
      { sentence: "She ___ to school yesterday.", correctAnswer: "went", options: ["goes", "went", "go", "going"] },
      { sentence: "She ___ to the party tomorrow.", correctAnswer: "will go", options: ["go", "goes", "will go", "going"] },
      { sentence: "She ___ TV at the moment.", correctAnswer: "is watching", options: ["watches", "is watching", "watch", "watched"] },
      { sentence: "She ___ piano every Saturday.", correctAnswer: "plays", options: ["play", "plays", "playing", "played"] },
      { sentence: "She ___ her homework last night.", correctAnswer: "did", options: ["does", "did", "do", "doing"] },
      { sentence: "She ___ to music now.", correctAnswer: "is listening", options: ["listens", "is listening", "listen", "listened"] },
      { sentence: "She ___ to school by car.", correctAnswer: "goes", options: ["go", "goes", "going", "went"] },
      { sentence: "She ___ dinner at 7:00.", correctAnswer: "has", options: ["have", "has", "having", "had"] }
    ],
    medium: [
      { sentence: "She ___ to the party tonight.", correctAnswer: "is going", options: ["goes", "went", "is going", "has gone"] },
      { sentence: "She ___ a letter yesterday.", correctAnswer: "wrote", options: ["writes", "wrote", "is writing", "has written"] },
      { sentence: "She ___ already ___ the report.", correctAnswer: "has finished", options: ["finished", "has finished", "finishes", "is finishing"] },
      { sentence: "She ___ when I saw her.", correctAnswer: "was crying", options: ["cried", "was crying", "is crying", "has cried"] },
      { sentence: "She ___ to the USA next year.", correctAnswer: "will travel", options: ["travels", "traveled", "will travel", "is traveling"] },
      { sentence: "She ___ breakfast at the moment.", correctAnswer: "is having", options: ["has", "had", "is having", "has had"] },
      { sentence: "She ___ that book before.", correctAnswer: "has read", options: ["read", "has read", "is reading", "reads"] },
      { sentence: "She ___ at this company since 2021.", correctAnswer: "has worked", options: ["worked", "has worked", "is working", "works"] },
      { sentence: "She ___ for 3 hours when the lights went out.", correctAnswer: "had been reading", options: ["read", "was reading", "had been reading", "has read"] },
      { sentence: "She ___ the meeting by 5 PM.", correctAnswer: "will have finished", options: ["finishes", "has finished", "will have finished", "is finishing"] }
    ],
    hard: [
      { sentence: "By the time you call, she ___ the presentation.", correctAnswer: "will have prepared", options: ["will prepare", "will have prepared", "is preparing", "has prepared"] },
      { sentence: "She ___ at the cafe for two hours before he arrived.", correctAnswer: "had been waiting", options: ["waited", "was waiting", "had been waiting", "has been waiting"] },
      { sentence: "If she ___ harder, she would have won the competition.", correctAnswer: "had trained", options: ["trained", "had trained", "would train", "has trained"] },
      { sentence: "She wishes she ___ to the concert last weekend.", correctAnswer: "had gone", options: ["went", "had gone", "would go", "has gone"] },
      { sentence: "By next June, she ___ at this university for four years.", correctAnswer: "will have been studying", options: ["will study", "will have studied", "will have been studying", "has been studying"] },
      { sentence: "She ___ to have submitted her application by yesterday.", correctAnswer: "was supposed", options: ["supposes", "is supposed", "was supposed", "has supposed"] },
      { sentence: "Hardly ___ the store when it started to snow.", correctAnswer: "had she left", options: ["she had left", "had she left", "she left", "has she left"] },
      { sentence: "Not only ___ talented, but she also works extremely hard.", correctAnswer: "is she", options: ["she is", "is she", "she was", "was she"] },
      { sentence: "She insisted that he ___ the truth.", correctAnswer: "tell", options: ["tells", "told", "tell", "would tell"] },
      { sentence: "She recommended that the proposal ___ immediately.", correctAnswer: "be approved", options: ["is approved", "was approved", "be approved", "would be approved"] }
    ]
  }
};

const audioQuestionsByGender = {
  boy: {
    easy: [
      { sentence: "He likes to play football.", missing: "football", options: ["football", "basketball", "tennis", "soccer"] },
      { sentence: "He has a blue bike.", missing: "blue", options: ["red", "green", "blue", "yellow"] },
      { sentence: "He is reading a book.", missing: "reading", options: ["writing", "reading", "drawing", "playing"] },
      { sentence: "He likes to eat pizza.", missing: "pizza", options: ["burger", "pizza", "pasta", "salad"] },
      { sentence: "He plays with his dog.", missing: "dog", options: ["cat", "dog", "bird", "fish"] }
    ],
    medium: [
      { sentence: "He is playing football with his friends.", missing: "football", options: ["football", "basketball", "hockey", "tennis"] },
      { sentence: "He is fixing his bike in the garage.", missing: "fixing", options: ["riding", "driving", "fixing", "painting"] },
      { sentence: "They are watching a football match on TV.", missing: "football", options: ["basketball", "football", "baseball", "hockey"] },
      { sentence: "He is playing video games with his brother.", missing: "playing", options: ["watching", "playing", "reading", "drawing"] },
      { sentence: "He built a model of a car.", missing: "built", options: ["bought", "made", "built", "stole"] },
      { sentence: "He loves to play with toy cars.", missing: "cars", options: ["blocks", "cars", "dolls", "books"] },
      { sentence: "He is building a robot for his school project.", missing: "building", options: ["drawing", "writing", "building", "painting"] },
      { sentence: "He enjoys playing with action figures.", missing: "figures", options: ["toys", "books", "figures", "cards"] },
      { sentence: "He is practicing basketball after school.", missing: "basketball", options: ["football", "basketball", "baseball", "tennis"] },
      { sentence: "He is reading a comic book.", missing: "comic", options: ["comic", "novel", "poem", "guide"] }
    ],
    hard: [
      { sentence: "He has been practicing football for three consecutive hours.", missing: "consecutive", options: ["consecutive", "different", "separate", "various"] },
      { sentence: "He was repairing his bicycle when the thunderstorm began.", missing: "thunderstorm", options: ["rain", "snow", "thunderstorm", "fog"] },
      { sentence: "They had been discussing the controversial match before the coach arrived.", missing: "controversial", options: ["exciting", "boring", "controversial", "ordinary"] },
      { sentence: "He contemplated playing various video games but chose to study instead.", missing: "contemplated", options: ["considered", "contemplated", "decided", "planned"] },
      { sentence: "He meticulously constructed a detailed model of an ancient castle.", missing: "meticulously", options: ["carefully", "meticulously", "quickly", "easily"] },
      { sentence: "He enthusiastically participated in the robotics competition last weekend.", missing: "enthusiastically", options: ["reluctantly", "enthusiastically", "carefully", "nervously"] },
      { sentence: "He has demonstrated exceptional ability in mathematics and physics.", missing: "exceptional", options: ["average", "poor", "exceptional", "moderate"] },
      { sentence: "He was simultaneously playing chess and solving complex equations.", missing: "simultaneously", options: ["previously", "eventually", "simultaneously", "gradually"] },
      { sentence: "He had acknowledged the significance of regular practice before the tournament.", missing: "significance", options: ["importance", "significance", "difficulty", "simplicity"] },
      { sentence: "He was predominantly interested in scientific literature rather than fiction.", missing: "predominantly", options: ["slightly", "rarely", "predominantly", "never"] }
    ]
  },
  girl: {
    easy: [
      { sentence: "She likes to draw pictures.", missing: "draw", options: ["read", "draw", "write", "sing"] },
      { sentence: "She has a red dress.", missing: "red", options: ["blue", "green", "red", "yellow"] },
      { sentence: "She is playing with her doll.", missing: "doll", options: ["book", "ball", "doll", "cat"] },
      { sentence: "She likes to eat ice cream.", missing: "ice cream", options: ["cake", "candy", "chocolate", "ice cream"] },
      { sentence: "She plays with her cat.", missing: "cat", options: ["dog", "cat", "bird", "fish"] }
    ],
    medium: [
      { sentence: "She is baking cookies in the kitchen.", missing: "baking", options: ["painting", "baking", "writing", "singing"] },
      { sentence: "She loves to play with her dolls.", missing: "dolls", options: ["cars", "dolls", "blocks", "action figures"] },
      { sentence: "She is practicing ballet in the studio.", missing: "ballet", options: ["football", "ballet", "swimming", "tennis"] },
      { sentence: "She is drawing a picture of flowers.", missing: "drawing", options: ["singing", "drawing", "playing", "reading"] },
      { sentence: "She is decorating her room with new furniture.", missing: "decorating", options: ["painting", "decorating", "playing", "cleaning"] },
      { sentence: "She loves to play with her teddy bear.", missing: "teddy bear", options: ["doll", "teddy bear", "robot", "car"] },
      { sentence: "She is playing with her friends in the park.", missing: "playing", options: ["sleeping", "playing", "reading", "working"] },
      { sentence: "She enjoys dressing up in beautiful dresses.", missing: "dresses", options: ["clothes", "dresses", "shoes", "hats"] },
      { sentence: "She is reading a book about fairy tales.", missing: "book", options: ["magazine", "book", "newspaper", "guide"] },
      { sentence: "She is planting flowers in the garden.", missing: "planting", options: ["reading", "cooking", "planting", "drawing"] }
    ],
    hard: [
      { sentence: "She has been meticulously decorating the elaborate wedding cake since morning.", missing: "meticulously", options: ["quickly", "sloppily", "meticulously", "occasionally"] },
      { sentence: "She was choreographing an innovative ballet routine when the music stopped.", missing: "choreographing", options: ["watching", "practicing", "choreographing", "recording"] },
      { sentence: "They had been discussing the controversial art exhibition before the curator arrived.", missing: "controversial", options: ["popular", "interesting", "controversial", "boring"] },
      { sentence: "She contemplated various career options but ultimately chose medicine.", missing: "contemplated", options: ["ignored", "contemplated", "rejected", "accepted"] },
      { sentence: "She diligently practiced the intricate piano concerto for months.", missing: "intricate", options: ["simple", "intricate", "boring", "famous"] },
      { sentence: "She enthusiastically participated in the international science fair last spring.", missing: "enthusiastically", options: ["reluctantly", "enthusiastically", "nervously", "secretly"] },
      { sentence: "She has demonstrated extraordinary talent in literature and languages.", missing: "extraordinary", options: ["minimal", "average", "extraordinary", "basic"] },
      { sentence: "She was simultaneously managing her studies and volunteer work at the hospital.", missing: "simultaneously", options: ["rarely", "previously", "simultaneously", "occasionally"] },
      { sentence: "She had acknowledged the importance of perseverance before embarking on the project.", missing: "perseverance", options: ["talent", "luck", "money", "perseverance"] },
      { sentence: "She was predominantly interested in classical music rather than contemporary genres.", missing: "predominantly", options: ["never", "rarely", "occasionally", "predominantly"] }
    ]
  }
};

const imageQuestionsByGender = {
  boy: {
    easy: [
      { emoji: 'üçé', options: ['Apple', 'Banana', 'Orange', 'Grape'], correct: 0 },
      { emoji: 'üê∂', options: ['Cat', 'Dog', 'Mouse', 'Bird'], correct: 1 },
      { emoji: 'üöó', options: ['Car', 'Bus', 'Train', 'Bike'], correct: 0 },
      { emoji: 'üèÄ', options: ['Football', 'Basketball', 'Tennis', 'Golf'], correct: 1 },
      { emoji: 'üçï', options: ['Pizza', 'Burger', 'Sandwich', 'Pasta'], correct: 0 }
    ],
    medium: [
      { emoji: 'üçé', options: ['Apple', 'Banana', 'Cat', 'Dog'], correct: 0 },
      { emoji: 'üê∂', options: ['Cat', 'Dog', 'Car', 'Ball'], correct: 1 },
      { emoji: 'üìñ', options: ['Book', 'Milk', 'Table', 'Window'], correct: 0 },
      { emoji: 'üçì', options: ['Strawberry', 'Cherry', 'Peach', 'Lemon'], correct: 0 },
      { emoji: 'üöó', options: ['Bus', 'Car', 'Bicycle', 'Train'], correct: 1 },
      { emoji: 'üèÄ', options: ['Football', 'Basketball', 'Tennis', 'Baseball'], correct: 1 },
      { emoji: 'üé∏', options: ['Drums', 'Piano', 'Guitar', 'Flute'], correct: 2 },
      { emoji: 'üë®‚Äçüç≥', options: ['Doctor', 'Chef', 'Teacher', 'Artist'], correct: 1 },
      { emoji: 'üçï', options: ['Burger', 'Pizza', 'Sandwich', 'Salad'], correct: 1 },
      { emoji: 'üåç', options: ['Earth', 'Moon', 'Sun', 'Star'], correct: 0 }
    ],
    hard: [
      { emoji: 'üß¨', options: ['DNA', 'Cell', 'Bacteria', 'Virus'], correct: 0 },
      { emoji: '‚öôÔ∏è', options: ['Wheel', 'Gear', 'Cog', 'Machine'], correct: 1 },
      { emoji: 'üî¨', options: ['Telescope', 'Microscope', 'Magnifier', 'Lens'], correct: 1 },
      { emoji: 'üßÆ', options: ['Calculator', 'Abacus', 'Counter', 'Computer'], correct: 1 },
      { emoji: 'üß™', options: ['Beaker', 'Test tube', 'Flask', 'Bottle'], correct: 1 },
      { emoji: 'üõ∞Ô∏è', options: ['Rocket', 'Satellite', 'Airplane', 'Drone'], correct: 1 },
      { emoji: 'ü¶†', options: ['Bacteria', 'Virus', 'Microbe', 'Amoeba'], correct: 2 },
      { emoji: 'üìä', options: ['Graph', 'Chart', 'Diagram', 'Map'], correct: 1 },
      { emoji: 'üìê', options: ['Ruler', 'Protractor', 'Triangle', 'Compass'], correct: 2 },
      { emoji: 'üß≤', options: ['Battery', 'Magnet', 'Electricity', 'Wire'], correct: 1 }
    ]
  },
  girl: {
    easy: [
      { emoji: 'üçå', options: ['Banana', 'Apple', 'Orange', 'Grape'], correct: 0 },
      { emoji: 'üê±', options: ['Cat', 'Dog', 'Mouse', 'Bird'], correct: 0 },
      { emoji: 'üåπ', options: ['Rose', 'Tulip', 'Daisy', 'Lily'], correct: 0 },
      { emoji: 'üç∞', options: ['Cake', 'Cookie', 'Pie', 'Cupcake'], correct: 0 },
      { emoji: 'ü¶ã', options: ['Butterfly', 'Bee', 'Dragonfly', 'Ladybug'], correct: 0 }
    ],
    medium: [
      { emoji: 'üçå', options: ['Banana', 'Apple', 'Dog', 'Cat'], correct: 0 },
      { emoji: 'üê±', options: ['Cat', 'Dog', 'Book', 'Milk'], correct: 0 },
      { emoji: 'üßÉ', options: ['Juice', 'Table', 'Ball', 'Book'], correct: 0 },
      { emoji: 'üåπ', options: ['Rose', 'Tulip', 'Lily', 'Sunflower'], correct: 0 },
      { emoji: 'üìö', options: ['Books', 'Magazines', 'Newspapers', 'Notebooks'], correct: 0 },
      { emoji: 'üíª', options: ['Tablet', 'Computer', 'Phone', 'Camera'], correct: 1 },
      { emoji: 'üé§', options: ['Microphone', 'Guitar', 'Piano', 'Drums'], correct: 0 },
      { emoji: 'üñºÔ∏è', options: ['Picture', 'Frame', 'Window', 'Clock'], correct: 0 },
      { emoji: 'üç∞', options: ['Cake', 'Cookie', 'Ice Cream', 'Candy'], correct: 0 },
      { emoji: 'üéí', options: ['Bag', 'Shoes', 'Jacket', 'Hat'], correct: 0 }
    ],
    hard: [
      { emoji: 'üß¨', options: ['RNA', 'DNA', 'Protein', 'Enzyme'], correct: 1 },
      { emoji: 'üî≠', options: ['Microscope', 'Telescope', 'Periscope', 'Binoculars'], correct: 1 },
      { emoji: 'üß´', options: ['Petri dish', 'Beaker', 'Test tube', 'Flask'], correct: 0 },
      { emoji: 'ü¶†', options: ['Cell', 'Virus', 'Bacteria', 'Microbe'], correct: 2 },
      { emoji: 'üìê', options: ['Square', 'Triangle', 'Ruler', 'Protractor'], correct: 1 },
      { emoji: 'üß©', options: ['Game', 'Toy', 'Puzzle', 'Block'], correct: 2 },
      { emoji: 'üîç', options: ['Microscope', 'Magnifier', 'Lens', 'Glass'], correct: 1 },
      { emoji: 'üìä', options: ['Table', 'Chart', 'Graph', 'Diagram'], correct: 2 },
      { emoji: 'üß™', options: ['Vial', 'Test tube', 'Bottle', 'Container'], correct: 1 },
      { emoji: 'üíâ', options: ['Needle', 'Syringe', 'Vaccine', 'Medicine'], correct: 1 }
    ]
  }
};

const exercise4WordsByGender = {
  boy: ["apple", "banana", "cat", "dog", "elephant","car","chair","garage","close"],
  girl: ["flower", "butterfly", "kitten", "strawberry", "unicorn","dress","garden","fish"]
};

const timeQuestions = {
  easy: [
    ["It's one o'clock.", "üïê", ["üïê", "üïë", "üïí", "üïì"]],
    ["It's two o'clock.", "üïë", ["üïì", "üïë", "üïí", "üïê"]],
    ["It's three o'clock.", "üïí", ["üïë", "üïì", "üïí", "üïî"]],
    ["It's six o'clock.", "üïï", ["üïï", "üïó", "üïô", "üïõ"]],
    ["It's nine o'clock.", "üïò", ["üïö", "üïô", "üïò", "üïó"]]
  ],
  medium: [
    ["It's one o'clock.", "üïê", ["üïê", "üïí", "üïò", "üïì"]],
    ["It's two o'clock.", "üïë", ["üïê", "üïë", "üïì", "üïï"]],
    ["It's three o'clock.", "üïí", ["üïì", "üïí", "üïë", "üïî"]],
    ["It's four o'clock.", "üïì", ["üïî", "üïí", "üïì", "üïö"]],
    ["It's five o'clock.", "üïî", ["üïî", "üïñ", "üïò", "üïê"]],
    ["It's six o'clock.", "üïï", ["üïò", "üïï", "üïî", "üïì"]],
    ["It's seven o'clock.", "üïñ", ["üïñ", "üïó", "üïô", "üïï"]],
    ["It's eight o'clock.", "üïó", ["üïò", "üïó", "üïö", "üïî"]],
    ["It's nine o'clock.", "üïò", ["üïñ", "üïò", "üïó", "üïô"]],
    ["It's ten o'clock.", "üïô", ["üïô", "üïõ", "üïò", "üïí"]]
  ],
  hard: [
    ["It's half past one.", "üïú", ["üïù", "üïí", "üïú", "üïê"]],
    ["It's half past two.", "üïù", ["üïû", "üïù", "üïì", "üïë"]],
    ["It's half past three.", "üïû", ["üïü", "üïû", "üï†", "üïí"]],
    ["It's half past four.", "üïü", ["üï†", "üïü", "üï°", "üïì"]],
    ["It's half past five.", "üï†", ["üï°", "üï†", "üï¢", "üïî"]],
    ["It's half past six.", "üï°", ["üïï", "üï°", "üï£", "üï¢"]],
    ["It's half past seven.", "üï¢", ["üï£", "üï¢", "üï§", "üïñ"]],
    ["It's half past eight.", "üï£", ["üï§", "üï£", "üï•", "üïó"]],
    ["It's half past nine.", "üï§", ["üï•", "üï§", "üï¶", "üïò"]],
    ["It's half past ten.", "üï•", ["üï¶", "üï•", "üïö", "üïô"]],
    ["It's half past eleven.", "üï¶", ["üïõ", "üïß", "üï¶", "üïö"]],
    ["It's half past twelve.", "üïß", ["üïê", "üïß", "üïõ", "üï¶"]]
  ]
};
let correctAnswersCount = 0;
let currentQuestionIndex = 0;
let audioCurrentIndex = 0;
let audioCorrectCount = 0;
let isSpeaking = false;
let imageCurrentIndex = 0;
let imageCorrectCount = 0;
let imageAllowClick = true;
let exercise4Current = 0;
let exercise4Words = [];
let emojiClockCurrentIndex = 0;
let emojiClockCorrectCount = 0;
let emojiClockAllowClick = true;
let currentDifficulty = "medium"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
let difficultySelected = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

//exercise 1 -----------------------------------------------------------

function selectDifficulty(exercise, difficulty) {
  currentDifficulty = difficulty;
  difficultySelected = true;
  
  if (exercise === 1) {
    displayQuestion();
  } else if (exercise === 2) {
    displayAudioQuestion();
  } else if (exercise === 3) {
    loadNextQuestion3();
  } else if (exercise === 4) {
    // –î–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 4 –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    exercise4Words = exercise4WordsByGender[version][difficulty] || exercise4WordsByGender[version]["medium"];
    const wordText = document.getElementById("exercise4-word-text");
    if (wordText) {
      wordText.textContent = `–°–∫–∞–∂–∏ —Å–ª–æ–≤–æ: ${exercise4Words[exercise4Current]}`;
      wordText.style.display = "block";
    }
  } else if (exercise === 5) {
    displayQuestion5();
  }
}

function showDifficultySelection(exercise) {
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ exercise-screen
  document.getElementById(`exercise${exercise}-screen`).innerHTML = `
    <h2>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</h2>
  `;
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö exercise-var
  document.getElementById(`exercise${exercise}-var-var1`).innerHTML = 'üòé–õ–µ–≥–∫–∏–π';
  document.getElementById(`exercise${exercise}-var-var1`).setAttribute('onclick', `selectDifficulty(${exercise}, 'easy')`);
  
  document.getElementById(`exercise${exercise}-var-var2`).innerHTML = 'üßê–°—Ä–µ–¥–Ω–∏–π';
  document.getElementById(`exercise${exercise}-var-var2`).setAttribute('onclick', `selectDifficulty(${exercise}, 'medium')`);
  
  document.getElementById(`exercise${exercise}-var-var3`).innerHTML = 'ü´°–°–ª–æ–∂–Ω—ã–π';
  document.getElementById(`exercise${exercise}-var-var3`).setAttribute('onclick', `selectDifficulty(${exercise}, 'hard')`);
  
  // –û—á–∏—â–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —á–µ–≥–æ-—Ç–æ –µ—â–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  document.getElementById(`exercise${exercise}-var-var4`).innerHTML = '';
  document.getElementById(`exercise${exercise}-var-var4`).setAttribute('onclick', '');
}

function loadNextQuestion() {
  currentQuestionIndex++;

  if (currentQuestionIndex >= questionsByGender[version][currentDifficulty].length || currentQuestionIndex >= 10) {
    showFinalResult();
    return;
  }

  document.getElementById("next-question-btn").classList.remove("active");
  displayQuestion();
}

function checkAnswer(selectedVar) {
  if (!difficultySelected) return; // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–∫–∏, –µ—Å–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  
  const selectedOption = document.getElementById(selectedVar).innerHTML;
  const correctAnswer = document.getElementById("exercise1-screen").getAttribute("data-correct-answer");

  const options = document.querySelectorAll('.exercise1-var');
  options.forEach(option => {
    option.classList.remove('correct', 'incorrect');
    option.style.pointerEvents = 'none';
  });

  if (selectedOption === correctAnswer) {
    document.getElementById(selectedVar).classList.add('correct');
    correctAnswersCount++;
  } else {
    document.getElementById(selectedVar).classList.add('incorrect');

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    options.forEach(option => {
      if (option.innerHTML === correctAnswer) {
        option.classList.add('correct');
      }
    });
  }

  document.getElementById("next-question-btn").classList.add("active");
}

function displayQuestion() {
  const question = questionsByGender[version][currentDifficulty][currentQuestionIndex];
  const sentenceWithBlank = question.sentence.replace("___", "<span class='blank'>___</span>");
  document.getElementById("exercise1-screen").innerHTML = sentenceWithBlank;

  const shuffledOptions = question.options.sort(() => Math.random() - 0.5);
  for (let i = 1; i <= 4; i++) {
    document.getElementById(`exercise1-var-var${i}`).innerHTML = shuffledOptions[i - 1];
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    document.getElementById(`exercise1-var-var${i}`).setAttribute('onclick', `checkAnswer('exercise1-var-var${i}')`);
  }

  document.getElementById("exercise1-screen").setAttribute("data-correct-answer", question.correctAnswer);

  const nextButton = document.getElementById("next-question-btn");
  nextButton.classList.remove("active");

  document.querySelectorAll('.exercise1-var').forEach(option => {
    option.classList.remove('correct', 'incorrect');
    option.style.pointerEvents = 'auto';
  });

  twemoji.parse(document.getElementById("exercise1-screen"));
}

function showFinalResult() {
  const percentage = Math.round((correctAnswersCount / 10) * 100);
  const resultMessage = `–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${correctAnswersCount} –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.<br>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage}%`;

  document.getElementById("exercise1-screen").innerHTML = `
    <div class="final-result">
      <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
      <p>${resultMessage}</p>
    </div>
  `;

  const nextButton = document.getElementById("next-question-btn");
  nextButton.classList.add("active");
  nextButton.textContent = '–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞';
  nextButton.onclick = function () {
    location.reload();
  };
}

window.onload = function () {
  if (version) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficultySelected = false;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1
    const exercise1Screen = document.getElementById("exercise1-screen");
    if (exercise1Screen) {
      showDifficultySelection(1);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 2
    const exercise2Screen = document.getElementById("exercise2-screen");
    if (exercise2Screen) {
      showDifficultySelection(2);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 3
    const exercise3Screen = document.getElementById("exercise3-screen");
    if (exercise3Screen) {
      showDifficultySelection(3);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 4
    const exercise4Screen = document.getElementById("exercise4-word-text");
    if (exercise4Screen && exercise4Screen.parentNode) {
      const exercise4Parent = exercise4Screen.parentNode;
      const exercise4Id = exercise4Parent.id || "exercise4";
      const exercise4Number = exercise4Id.replace("exercise", "");
      showDifficultySelection(exercise4Number);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 5
    const exercise5Screen = document.getElementById("exercise5-screen");
    if (exercise5Screen) {
      showDifficultySelection(5);
    }
  } else {
    console.warn('–ü–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.');
  }
};

// exercise 2-------------------------------------------------------------------------
function detectBrowser() {
  const userAgent = navigator.userAgent;

  if (userAgent.includes("Chrome") && !userAgent.includes("Edg/")) return "chrome";
  if (userAgent.includes("Safari") && !userAgent.includes("Chrome")) return "safari";
  if (userAgent.includes("Edg/")) return "edge";
  return "other";
}

function speakText(text) {
  if ('speechSynthesis' in window) {
    if (isSpeaking) {
      console.log("–û–∑–≤—É—á–∫–∞ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
      return;
    }

    const onVoicesChanged = () => {
      const voices = window.speechSynthesis.getVoices();
      console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:", voices.map(v => ({ name: v.name, lang: v.lang })));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${isIOS ? 'iOS' : isMobile ? 'Mobile' : 'Desktop'}`);

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –º—É–∂—Å–∫–æ–π –∏ –∂–µ–Ω—Å–∫–æ–π –≤–µ—Ä—Å–∏–π
      const maleVoicePriority = [
        // Apple –≥–æ–ª–æ—Å–∞ (Safari, iOS, macOS) - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è iOS
        "Daniel (Enhanced)", "Daniel",
        "Alex (Enhanced)", "Alex", 
        "Arthur (Enhanced)", "Arthur",
        "Oliver (Enhanced)", "Oliver",
        
        // Google –≥–æ–ª–æ—Å–∞ (Chrome, Android)
        "Google UK English Male",
        "Google –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–º—É–∂—Å–∫–æ–π)",
        
        // Microsoft –≥–æ–ª–æ—Å–∞ (Edge, Windows)
        "Microsoft Ryan Online (Natural) - English (United Kingdom)",
        "Microsoft George Online (Natural) - English (United Kingdom)", 
        "Microsoft Ryan - English (United Kingdom)",
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        "Male #1", "Male #2", "Tom"
      ];

      const femaleVoicePriority = [
        // Apple –≥–æ–ª–æ—Å–∞ (Safari, iOS, macOS) - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è iOS
        "Moira (Enhanced)", "Moira",
        "Kate (Enhanced)", "Kate", 
        "Serena (Enhanced)", "Serena",
        "Fiona (Enhanced)", "Fiona",
        "Victoria (Enhanced)", "Victoria",
        "Samantha (Enhanced)", "Samantha",
        "Zoe (Enhanced)", "Zoe",
        "Tessa (Enhanced)", "Tessa",
        
        // Google –≥–æ–ª–æ—Å–∞ (Chrome, Android)
        "Google UK English Female",
        "Google –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–∂–µ–Ω—Å–∫–∏–π)",
        
        // Microsoft –≥–æ–ª–æ—Å–∞ (Edge, Windows)
        "Microsoft Libby Online (Natural) - English (United Kingdom)",
        "Microsoft Hazel Online (Natural) - English (United Kingdom)",
        "Microsoft Susan - English (United Kingdom)",
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        "Female #1", "Female #2"
      ];

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ–ª–æ—Å–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const findVoiceByPriority = (priorityList) => {
        for (const voiceName of priorityList) {
          const voice = voices.find(v => 
            v.name === voiceName || 
            v.name.toLowerCase().includes(voiceName.toLowerCase())
          );
          if (voice) {
            console.log(`–ù–∞–π–¥–µ–Ω –≥–æ–ª–æ—Å: ${voice.name}`);
            return voice;
          }
        }
        return null;
      };

      // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —è–∑—ã–∫—É –∏ –ø–æ–ª—É
      const findFallbackVoice = (isFemale = false) => {
        let englishVoices = voices.filter(voice => 
          voice.lang.startsWith('en') || voice.lang === 'en'
        );

        if (englishVoices.length === 0) return null;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è iOS
        if (isIOS) {
          console.log("iOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤");
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ –ø–æ–ª—É –¥–ª—è iOS
          const iosGenderKeywords = {
            male: ['daniel', 'alex', 'arthur', 'oliver', 'male'],
            female: ['moira', 'kate', 'victoria', 'samantha', 'serena', 'fiona', 'zoe', 'tessa', 'female']
          };

          const targetKeywords = isFemale ? iosGenderKeywords.female : iosGenderKeywords.male;
          
          // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º Enhanced –≤–µ—Ä—Å–∏–∏
          for (const voice of englishVoices) {
            const voiceName = voice.name.toLowerCase();
            if (voiceName.includes('enhanced') && 
                targetKeywords.some(keyword => voiceName.includes(keyword))) {
              console.log(`–ù–∞–π–¥–µ–Ω Enhanced –≥–æ–ª–æ—Å –¥–ª—è iOS: ${voice.name}`);
              return voice;
            }
          }
          
          // –ü–æ—Ç–æ–º –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
          for (const voice of englishVoices) {
            const voiceName = voice.name.toLowerCase();
            if (targetKeywords.some(keyword => voiceName.includes(keyword))) {
              console.log(`–ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è iOS: ${voice.name}`);
              return voice;
            }
          }
          
          // –î–ª—è iOS –±–µ—Ä–µ–º –ª—é–±–æ–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≥–æ–ª–æ—Å, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å—Ç–æ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
          if (englishVoices.length > 1) {
            return englishVoices[1];
          }
        }
        
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        const genderKeywords = {
          male: ['male', 'man', 'boy', 'daniel', 'alex', 'tom', 'ryan', 'george', 'oliver', 'arthur'],
          female: ['female', 'woman', 'girl', 'moira', 'kate', 'victoria', 'samantha', 'libby', 'hazel', 'susan', 'serena', 'fiona', 'zoe', 'tessa']
        };

        const targetKeywords = isFemale ? genderKeywords.female : genderKeywords.male;
        
        // –ò—â–µ–º –≥–æ–ª–æ—Å —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        for (const voice of englishVoices) {
          const voiceName = voice.name.toLowerCase();
          if (targetKeywords.some(keyword => voiceName.includes(keyword))) {
            return voice;
          }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–æ–ª—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        return englishVoices[0];
      };

      let selectedVoice = null;

      // –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞
      if (version === 'girl') {
        selectedVoice = findVoiceByPriority(femaleVoicePriority) || 
                      findFallbackVoice(true);
      } else if (version === 'boy') {
        selectedVoice = findVoiceByPriority(maleVoicePriority) || 
                      findFallbackVoice(false);
      }

      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –≥–æ–ª–æ—Å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      if (!selectedVoice) {
        selectedVoice = voices.find(voice => 
          voice.lang.startsWith('en') || voice.lang === 'en'
        ) || voices[0];
        console.warn("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≥–æ–ª–æ—Å:", selectedVoice?.name);
      }

      if (!selectedVoice) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤");
        return;
      }

      console.log(`–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å –¥–ª—è –≤–µ—Ä—Å–∏–∏ "${version}": ${selectedVoice.name} (${selectedVoice.lang})`);

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.voice = selectedVoice;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
      if (isIOS) {
        utterance.lang = 'en-US'; // iOS –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å en-US —á–µ–º —Å en-GB
        utterance.rate = 1.0; // –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è iOS
        utterance.pitch = version === 'girl' ? 1.3 : 0.9; // –ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–æ–Ω–µ
        utterance.volume = 1.0;
      } else {
        utterance.lang = selectedVoice.lang || 'en-GB';
        utterance.rate = 1;
        utterance.pitch = version === 'girl' ? 1.2 : 1.0;
      }

      isSpeaking = true;

      utterance.onstart = () => {
        console.log(`–ù–∞—á–∞—Ç–∞ –æ–∑–≤—É—á–∫–∞ –≥–æ–ª–æ—Å–æ–º: ${selectedVoice.name}`);
      };

      utterance.onend = () => {
        isSpeaking = false;
        console.log("–û–∑–≤—É—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      };

      utterance.onerror = (event) => {
        isSpeaking = false;
        console.warn("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:", event.error);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –¥—Ä—É–≥–∏–º –≥–æ–ª–æ—Å–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (event.error === 'voice-unavailable') {
          console.log("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≥–æ–ª–æ—Å...");
          const fallbackVoice = voices.find(v => v.lang.startsWith('en')) || voices[0];
          if (fallbackVoice && fallbackVoice !== selectedVoice) {
            const fallbackUtterance = new SpeechSynthesisUtterance(text);
            fallbackUtterance.voice = fallbackVoice;
            fallbackUtterance.lang = fallbackVoice.lang || 'en';
            window.speechSynthesis.speak(fallbackUtterance);
          }
        }
      };

      window.speechSynthesis.speak(utterance);
      window.speechSynthesis.removeEventListener('voiceschanged', onVoicesChanged);
    };

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const initVoices = () => {
      if (window.speechSynthesis.getVoices().length > 0) {
        onVoicesChanged();
      } else {
        window.speechSynthesis.addEventListener('voiceschanged', onVoicesChanged);
        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        setTimeout(() => {
          if (window.speechSynthesis.getVoices().length > 0) {
            onVoicesChanged();
          }
        }, 100);
      }
    };

    initVoices();
  } else {
    console.warn("Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
function preloadVoices() {
  if ('speechSynthesis' in window) {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    // –î–ª—è iOS –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
    if (isIOS) {
      // –ù–∞ iOS –≥–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const dummy = new SpeechSynthesisUtterance('');
      dummy.volume = 0;
      dummy.rate = 10;
      window.speechSynthesis.speak(dummy);
      
      return new Promise((resolve) => {
        let attempts = 0;
        const maxAttempts = 50;
        
        const checkVoicesIOS = () => {
          const voices = window.speechSynthesis.getVoices();
          attempts++;
          
          if (voices.length > 1 || attempts >= maxAttempts) { // iOS –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º—É–º 1 –≥–æ–ª–æ—Å —Å—Ä–∞–∑—É
            console.log(`iOS: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${voices.length} –≥–æ–ª–æ—Å–æ–≤ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            voices.forEach((voice, index) => {
              console.log(`${index}: ${voice.name} (${voice.lang}) - ${voice.default ? 'default' : ''}`);
            });
            resolve(voices);
          } else {
            setTimeout(checkVoicesIOS, 100);
          }
        };
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        setTimeout(checkVoicesIOS, 200);
      });
    } else {
      // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      window.speechSynthesis.getVoices();
      
      const dummy = new SpeechSynthesisUtterance('');
      dummy.volume = 0;
      window.speechSynthesis.speak(dummy);
      
      return new Promise((resolve) => {
        const checkVoices = () => {
          const voices = window.speechSynthesis.getVoices();
          if (voices.length > 0) {
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${voices.length} –≥–æ–ª–æ—Å–æ–≤`);
            resolve(voices);
          } else {
            setTimeout(checkVoices, 50);
          }
        };
        
        if (window.speechSynthesis.getVoices().length > 0) {
          resolve(window.speechSynthesis.getVoices());
        } else {
          window.speechSynthesis.addEventListener('voiceschanged', () => {
            resolve(window.speechSynthesis.getVoices());
          }, { once: true });
          
          setTimeout(checkVoices, 100);
        }
      });
    }
  }
}


// –í–ê–ñ–ù–û –î–õ–Ø iOS

function initSpeechForIOS() {
  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è iOS...");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∏—Ö–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ API
    const initUtterance = new SpeechSynthesisUtterance('');
    initUtterance.volume = 0;
    initUtterance.rate = 10;
    
    initUtterance.onend = () => {
      setTimeout(() => {
        const voices = window.speechSynthesis.getVoices();
        console.log(`–ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ ${voices.length} –≥–æ–ª–æ—Å–æ–≤`);
        // debugiOSVoices(); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–≤—É–∫–æ–≤
      }, 500);
    };
    
    window.speechSynthesis.speak(initUtterance);
  }
}

document.addEventListener('touchstart', initSpeechForIOS, { once: true });
document.addEventListener('click', initSpeechForIOS, { once: true });

document.addEventListener('DOMContentLoaded', () => {
  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    // –î–ª—è iOS –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("iOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ì–æ–ª–æ—Å–∞ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏.");
  } else {
    preloadVoices().then(() => {
      console.log('–ì–æ–ª–æ—Å–∞ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    });
  }
});

function testVoices() {
  const voices = window.speechSynthesis.getVoices();
  console.table(voices.map(v => ({
    name: v.name,
    lang: v.lang,
    gender: v.name.toLowerCase().includes('female') || 
            v.name.toLowerCase().includes('woman') ? 'female' : 
            v.name.toLowerCase().includes('male') || 
            v.name.toLowerCase().includes('man') ? 'male' : 'unknown'
  })));
}
// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
function displayAudioQuestion() {
  const data = audioQuestionsByGender[version][currentDifficulty][audioCurrentIndex];
  const sentenceWithBlank = data.sentence.replace(data.missing, `<span class="blank">___</span>`);
  const fullSentence = data.sentence;

  const screen = document.getElementById("exercise2-screen");
  screen.innerHTML = `<div class="listen-area-text">${sentenceWithBlank}</div>`;

  const textElement = screen.querySelector(".listen-area-text");

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
  const playWithAnimation = () => {
    if (isSpeaking) return;
    textElement.classList.add("speaking");
    speakText(fullSentence);
    setTimeout(() => textElement.classList.remove("speaking"), fullSentence.split(" ").length * 400);
  };

  // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º
  textElement.style.cursor = "pointer";
  textElement.onclick = playWithAnimation;

  // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  playWithAnimation();

  // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
  const shuffled = [...data.options].sort(() => Math.random() - 0.5);
  shuffled.forEach((option, idx) => {
    const el = document.getElementById(`exercise2-var-var${idx + 1}`);
    el.textContent = option;
    el.classList.remove('correct', 'incorrect');
    el.style.pointerEvents = 'auto';
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    el.setAttribute('onclick', `checkAnswer2('exercise2-var-var${idx + 1}')`);
  });

  document.getElementById("next-question2-btn").classList.remove("active");

  twemoji.parse(document.getElementById("exercise2-screen"));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
function checkAnswer2(selectedId) {
  if (!difficultySelected) return; // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–∫–∏, –µ—Å–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  
  const selectedOption = document.getElementById(selectedId).textContent;
  const correctOption = audioQuestionsByGender[version][currentDifficulty][audioCurrentIndex].missing;

  const options = document.querySelectorAll('.exercise2-var');
  options.forEach(option => {
    option.classList.remove('correct', 'incorrect');
    option.style.pointerEvents = 'none';
  });

  if (selectedOption === correctOption) {
    document.getElementById(selectedId).classList.add('correct');
    audioCorrectCount++;
  } else {
    document.getElementById(selectedId).classList.add('incorrect');
    options.forEach(option => {
      if (option.textContent === correctOption) {
        option.classList.add('correct');
      }
    });
  }

  document.getElementById("next-question2-btn").classList.add("active");
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
function loadNextQuestion2() {
  audioCurrentIndex++;
  if (audioCurrentIndex >= audioQuestionsByGender[version][currentDifficulty].length) {
    showFinalAudioResult();
  } else {
    displayAudioQuestion();
  }
}

// –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
function showFinalAudioResult() {
  const percent = Math.round((audioCorrectCount / audioQuestionsByGender[version][currentDifficulty].length) * 100);
  document.getElementById("exercise2-screen").innerHTML = `
    <div class="final-result">
      <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω</h2>
      <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${audioCorrectCount} –∏–∑ ${audioQuestionsByGender[version][currentDifficulty].length} <br>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${percent}%</p>
    </div>
  `;

  document.getElementById("next-question2-btn").classList.add("active");
  document.getElementById("next-question2-btn").textContent = "–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞";
  document.getElementById("next-question2-btn").onclick = () => location.reload();
}

//exercise 3----------------------------------------------------
function loadNextQuestion3() {
  const questions = imageQuestionsByGender[version][currentDifficulty];
  if (imageCurrentIndex >= questions.length) {
    showFinalImageResult();
    return;
  }

  const q = questions[imageCurrentIndex];
  document.getElementById('exercise3-screen').innerHTML = `<div class="emoji-display">${q.emoji}</div>`;

  q.options.forEach((opt, i) => {
    const el = document.getElementById(`exercise3-var-var${i + 1}`);
    el.textContent = opt;
    el.classList.remove('correct', 'incorrect');
    el.style.pointerEvents = 'auto';
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    el.setAttribute('onclick', `checkAnswer3('exercise3-var-var${i + 1}')`);
  });

  document.getElementById("next-question3-btn").classList.remove("active");
  imageAllowClick = true;

  twemoji.parse(document.getElementById("exercise3-screen"));
}

function checkAnswer3(id) {
  if (!difficultySelected || !imageAllowClick) return; // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–∫–∏, –µ—Å–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª –∫–ª–∏–∫
  
  const selectedIndex = parseInt(id.slice(-1)) - 1;
  const q = imageQuestionsByGender[version][currentDifficulty][imageCurrentIndex];

  const options = document.querySelectorAll(".exercise3-var");
  options.forEach(option => option.style.pointerEvents = 'none');

  if (selectedIndex === q.correct) {
    document.getElementById(id).classList.add('correct');
    imageCorrectCount++;
  } else {
    document.getElementById(id).classList.add('incorrect');
    document.getElementById(`exercise3-var-var${q.correct + 1}`).classList.add('correct');
  }

  document.getElementById("next-question3-btn").classList.add("active");
  imageAllowClick = false;
}

function showFinalImageResult() {
  const percent = Math.round((imageCorrectCount / imageQuestionsByGender[version][currentDifficulty].length) * 100);
  document.getElementById("exercise3-screen").innerHTML = `
    <div class="final-result">
      <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω</h2>
      <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${imageCorrectCount} –∏–∑ ${imageQuestionsByGender[version][currentDifficulty].length}<br>–†–µ–∑—É–ª—å—Ç–∞—Ç: ${percent}%</p>
    </div>
  `;

  document.getElementById("next-question3-btn").classList.add("active");
  document.getElementById("next-question3-btn").textContent = "–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞";
  document.getElementById("next-question3-btn").onclick = () => location.reload();
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
function nextQuestion3() {
  imageCurrentIndex++; 
  loadNextQuestion3(); 
}

//exercise 4 --------------------------------------------------------------------------
document.addEventListener("DOMContentLoaded", () => {
  exercise4Words = exercise4WordsByGender[version] || exercise4WordsByGender["boy"];
  const wordText = document.getElementById("exercise4-word-text");
  if (wordText) {
      wordText.textContent = `–°–∫–∞–∂–∏ —Å–ª–æ–≤–æ: ${exercise4Words[exercise4Current]}`;
  }
});

function exercise4PlayWord() {
  const word = exercise4Words[exercise4Current];
  speakText(word); 
}

function exercise4StartListening() {
  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.lang = "en-US";

  recognition.onresult = function (event) {
      const spoken = event.results[0][0].transcript.toLowerCase().trim();
      const expected = exercise4Words[exercise4Current];
      const feedbackEl = document.getElementById("exercise4-feedback");

      if (spoken === expected) {
          feedbackEl.textContent = `‚úÖ –ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Å–∫–∞–∑–∞–ª: ${spoken}`;
      } else {
          feedbackEl.textContent = `‚ùå –¢—ã —Å–∫–∞–∑–∞–ª: "${spoken}". –ü—Ä–∞–≤–∏–ª—å–Ω–æ: "${expected}"`;
      }
  };

  recognition.onerror = function () {
      document.getElementById("exercise4-feedback").textContent = "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.";
  };

  recognition.start();
}

function exercise4NextWord() {
  exercise4Current++;
  if (exercise4Current >= exercise4Words.length) {
      exercise4Current = 0;
  }
  document.getElementById("exercise4-word-text").textContent = `–°–∫–∞–∂–∏ —Å–ª–æ–≤–æ: ${exercise4Words[exercise4Current]}`;
  document.getElementById("exercise4-feedback").textContent = "";
}

document.querySelectorAll('.main-faq-question').forEach(question => {
  question.addEventListener('click', () => {
      const item = question.closest('.main-faq-item');
      item.classList.toggle('active');
  });
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ 5
function checkAnswer5(selectedId) {
  console.log("checkAnswer5 –≤—ã–∑–≤–∞–Ω–∞ —Å:", selectedId); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  
  if (!difficultySelected || !emojiClockAllowClick) {
    console.log("–ö–ª–∏–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: difficultySelected =", difficultySelected, "emojiClockAllowClick =", emojiClockAllowClick);
    return;
  }
  
  emojiClockAllowClick = false;

  const selectedEmoji = document.getElementById(selectedId).innerText;
  const correct = document.getElementById("exercise5-screen").getAttribute("data-correct-answer");
  console.log("–í—ã–±—Ä–∞–Ω–æ:", selectedEmoji, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", correct);

  const options = document.querySelectorAll('.exercise5-var');
  options.forEach(option => {
    option.classList.remove('correct', 'incorrect');
    option.style.pointerEvents = 'none';
  });

  if (selectedEmoji === correct) {
    document.getElementById(selectedId).classList.add('correct');
    emojiClockCorrectCount++;
  } else {
    document.getElementById(selectedId).classList.add('incorrect');
    options.forEach(option => {
      if (option.innerText === correct) {
        option.classList.add('correct');
      }
    });
  }

  document.getElementById("next-question5-btn").classList.add("active");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏ 5
function displayQuestion5() {
  if (!difficultySelected) return; // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
  
  const [sentence, correctAnswer, options] = timeQuestions[currentDifficulty][emojiClockCurrentIndex];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ exercise5-image
  const imageElement = document.getElementById("exercise5-image");
  if (imageElement) {
    imageElement.innerText = sentence;
  } else {
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä—è–º–æ –≤ exercise5-screen
    const screenElement = document.getElementById("exercise5-screen");
    screenElement.innerHTML = `<div id="exercise5-image" class="emoji-display5">${sentence}</div>`;
  }
  
  document.getElementById("exercise5-screen").setAttribute("data-correct-answer", correctAnswer);

  const shuffled = [...options].sort(() => Math.random() - 0.5);
  for (let i = 1; i <= 4; i++) {
    const optionElement = document.getElementById(`exercise5-var-var${i}`);
    if (optionElement) {
      optionElement.innerText = shuffled[i - 1];
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      optionElement.setAttribute('onclick', `checkAnswer5('exercise5-var-var${i}')`);
    }
  }

  document.querySelectorAll('.exercise5-var').forEach(option => {
    option.classList.remove('correct', 'incorrect');
    option.style.pointerEvents = 'auto';
  });

  const nextButton = document.getElementById("next-question5-btn");
  if (nextButton) {
    nextButton.classList.remove("active");
  }
  
  emojiClockAllowClick = true;

  twemoji.parse(document.getElementById("exercise5-screen"));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function loadNextQuestion5() {
  if (!difficultySelected) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
  
  emojiClockCurrentIndex++;

  if (emojiClockCurrentIndex >= timeQuestions[currentDifficulty].length) {
    showFinalResult5();
    return;
  }

  displayQuestion5();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function showFinalResult5() {
  const percent = Math.round((emojiClockCorrectCount / timeQuestions[currentDifficulty].length) * 100);
  const resultMessage = `–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${emojiClockCorrectCount} –∏–∑ ${timeQuestions[currentDifficulty].length} –≤–æ–ø—Ä–æ—Å–æ–≤.<br>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${percent}%`;

  document.getElementById("exercise5-screen").innerHTML = `
    <div class="final-result">
      <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
      <p>${resultMessage}</p>
    </div>
  `;

  const btn = document.getElementById("next-question5-btn");
  btn.classList.add("active");
  btn.textContent = "–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞";
  btn.onclick = function() {
    location.reload();
  };
}
const cells = document.querySelectorAll(".main-teory-cell");
const overlay = document.querySelector(".overlay"); // –ò—Å–ø–æ–ª—å–∑—É–µ–º querySelector –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

cells.forEach(cell => {
    cell.addEventListener("click", () => {
        cells.forEach(c => c.classList.remove("expand"));
        cell.classList.add("expand");
        overlay.classList.add("active");
    });
});

overlay.addEventListener("click", () => {
    cells.forEach(c => c.classList.remove("expand"));
    overlay.classList.remove("active");
});

document.querySelectorAll('.main-faq-question').forEach(question => {
  question.addEventListener('click', () => {
      const item = question.closest('.main-faq-item');
      item.classList.toggle('active');
  });
});


document.addEventListener("DOMContentLoaded", function () {
  twemoji.parse(document.body, {
    folder: 'svg',
    ext: '.svg'
  });
});
